{"version":3,"sources":["Components/actions.js","store.js","Components/reducers.js","Components/TodoListItem.js","Components/thunks.js","Components/NewTodoForm.js","Components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["createTodo","todo","type","payload","loadTodosSuccess","todos","reducers","state","action","concat","todoToRemove","filter","id","updatedTodo","map","rootReducer","combineReducers","TodoItemContainer","styled","div","ButtonsContainer","Button","button","CompletedButton","RemoveButton","TodoListItem","onRemovePressed","onCompletedPressed","text","isCompleted","onClick","displayAlert","alert","FormContainer","NewTodoInput","input","NewTodoButton","connect","dispatch","onCreatePressed","a","body","JSON","stringify","fetch","headers","method","response","json","addTodoRequest","useState","inputValue","setInputValue","value","onChange","e","target","placeholder","some","ListWrapper","isLoading","startLoadingTodos","getState","removedTodo","removeTodoRequest","markTodoAsCompletedRequest","useEffect","loadingMessage","content","NewTodoForm","App","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9270a29a.chunk.js","sourcesContent":["export const CREATE_TODO = 'CREATE_TODO';\nexport const createTodo = todo => ({\n    type: CREATE_TODO,\n    payload: { todo },\n});\n\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const removeTodo = todo => ({\n    type: REMOVE_TODO,\n    payload: { todo }\n})\n\nexport const MARK_TODO_AS_COMPLETED = 'MARK_TODO_AS_COMPLETED';\nexport const markTodoAsCompleted = todo => ({\n    type: MARK_TODO_AS_COMPLETED,\n    payload: { todo }\n})\n\nexport const LOAD_TODOS_IN_PROGRESS = 'LOAD_TODOS_IN_PROGRESS';\nexport const loadTodosInProgress = () => ({\n    type: LOAD_TODOS_IN_PROGRESS,\n});\n\nexport const LOAD_TODOS_SUCCESS = 'LOAD_TODOS_SUCCESS';\nexport const loadTodosSuccess = todos => ({\n    type: LOAD_TODOS_SUCCESS,\n    payload: { todos },\n});\n\nexport const LOAD_TODOS_FAILURE = 'LOAD_TODOS_FAILURE';\nexport const loadTodosFailure = () => ({\n    type: LOAD_TODOS_FAILURE,\n});","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { todos } from \"./Components/reducers\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst reducers = {\n  todos\n};\n\nconst rootReducer = combineReducers(reducers);\n\nexport const configureStore = () =>\n  createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n","import {\n    CREATE_TODO,\n    REMOVE_TODO,\n    MARK_TODO_AS_COMPLETED,\n    LOAD_TODOS_IN_PROGRESS,\n    LOAD_TODOS_SUCCESS,\n    LOAD_TODOS_FAILURE,\n} from './actions';\n\nexport const isLoading = (state = false, action) => {\n    const { type } = action;\n\n    switch (type) {\n    case LOAD_TODOS_IN_PROGRESS:\n        return true;\n    case LOAD_TODOS_SUCCESS:\n    case LOAD_TODOS_FAILURE:\n        return false;\n    default:\n        return state;\n    }\n}\n\nexport const todos = (state = [], action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n    case CREATE_TODO: {\n        const { todo } = payload;\n        return state.concat(todo);\n    }\n    case REMOVE_TODO: {\n        const { todo: todoToRemove } = payload;\n        return state.filter(todo => todo.id !== todoToRemove.id);\n    }\n    case MARK_TODO_AS_COMPLETED: {\n        const { todo: updatedTodo } = payload;\n        return state.map(todo => {\n            if (todo.id === updatedTodo.id) {\n                return updatedTodo;\n            }\n            return todo;\n        });\n    }\n    case LOAD_TODOS_SUCCESS: {\n        const { todos } = payload;\n        return todos;\n    }\n    case LOAD_TODOS_IN_PROGRESS:\n    case LOAD_TODOS_FAILURE:\n    default:\n        return state;\n    }\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoItemContainer = styled.div`\n  background: #fff;\n  border-radius: 8px;\n  margin-top: 8px;\n  padding: 16px;\n  position: relative;\n  box-shadow: 0 4px 8px grey;\n`;\n\nconst ButtonsContainer = styled.div`\n  position: absolute;\n  right: 12px;\n  bottom: 12px;\n`;\n\nconst Button = styled.button`\n  font-size: 16px;\n  padding: 8px;\n  border: none;\n  border-radius: 8px;\n  outline: none;\n  cursor: pointer;\n  display: inline-block;\n`;\n\nconst CompletedButton = styled(Button)`\n  background-color: #22ee22;\n`;\n\nconst RemoveButton = styled(Button)`\n  background-color: #ee2222;\n  margin-left: 8px;\n`;\n\nconst TodoListItem = ({ todo, onRemovePressed, onCompletedPressed }) => (\n  <TodoItemContainer>\n    <h3>{todo.text}</h3>\n    <ButtonsContainer>\n      {todo.isCompleted ? null : (\n        <CompletedButton onClick={() => onCompletedPressed(todo.text)}>\n          Mark As Completed\n        </CompletedButton>\n      )}\n      <RemoveButton onClick={() => onRemovePressed(todo.text)}>\n        Remove\n      </RemoveButton>\n    </ButtonsContainer>\n  </TodoItemContainer>\n);\n\nexport default TodoListItem;\n","import {\n    createTodo,\n    removeTodo,\n    loadTodosInProgress,\n    loadTodosSuccess,\n    loadTodosFailure,\n    markTodoAsCompleted,\n} from './actions';\n\nexport const loadTodos = () => async (dispatch, getState) => {\n    try {\n        dispatch(loadTodosInProgress());\n        const response = await fetch('http://localhost:5000/todos');\n        const todos = await response.json();\n    \n        dispatch(loadTodosSuccess(todos));\n    } catch (e) {\n        dispatch(loadTodosFailure());\n        dispatch(displayAlert(e));\n    }\n}\n\nexport const addTodoRequest = text => async dispatch => {\n    try {\n        const body = JSON.stringify({ text });\n        const response = await fetch('http://localhost:5000/todos', {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            method: 'post',\n            body,\n        });\n        const todo = await response.json();\n        dispatch(createTodo(todo));\n    } catch (e) {\n        dispatch(displayAlert(e));\n    }\n}\n\nexport const removeTodoRequest = id => async dispatch => {\n    try {\n        const response = await fetch(`http://localhost:5000/todos/${id}`, {\n            method: 'delete'\n        });\n        const removedTodo = await response.json();\n        dispatch(removeTodo(removedTodo));\n    } catch (e) {\n        dispatch(displayAlert(e));\n    }\n}\n\nexport const markTodoAsCompletedRequest = id => async dispatch => {\n    try {\n        const response = await fetch(`http://localhost:5000/todos/${id}/completed`, {\n            method: 'post'\n        });\n        const updatedTodo = await response.json();\n        dispatch(markTodoAsCompleted(updatedTodo));\n    } catch (e) {\n        dispatch(displayAlert(e));\n    }\n}\n\nexport const displayAlert = text => () => {\n    alert(text);\n};","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodoRequest } from './thunks';\nimport styled from \"styled-components\";\n\nconst FormContainer = styled.div`\n  border-radius: 8px;\n  padding: 16px;\n  text-align: center;\n  box-shadow: 0 4px 8px grey;\n`;\n\nconst NewTodoInput = styled.input`\n  font-size: 16px;\n  padding: 8px;\n  border: none;\n  border-bottom: 2px solid #ddd;\n  border-radius: 8px;\n  width: 70%;\n  outline: none;\n`;\n\nconst NewTodoButton = styled.button`\n  font-size: 16px;\n  padding: 8px;\n  border: none;\n  border-radius: 8px;\n  outline: none;\n  cursor: pointer;\n  margin-left: 8px;\n  width: 20%;\n  background-color: #22ee22;\n`;\n\nconst NewToDoForm = ({ todos, onCreatePressed }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  return (\n    <FormContainer>\n      <NewTodoInput\n        type=\"text\"\n        value={inputValue}\n        onChange={e => setInputValue(e.target.value)}\n        placeholder=\"Type Your new todo here\"\n      />\n      <NewTodoButton\n        onClick={() => {\n          const isDuplicate = todos.some(todo => todo.text === inputValue);\n          if (!isDuplicate) {\n            onCreatePressed(inputValue);\n            setInputValue(\"\");\n          }\n        }}\n      >\n        Create Todo\n      </NewTodoButton>\n    </FormContainer>\n  );\n};\n\nconst mapStateToProps = state => ({\n    todos: state.todos,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onCreatePressed: text => dispatch(addTodoRequest(text)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewToDoForm);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport TodoListItem from \"./TodoListItem\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport {\n  loadTodos,\n  removeTodoRequest,\n  markTodoAsCompletedRequest\n} from \"./thunks\";\n\nconst ListWrapper = styled.div`\n  max-width: 700px;\n  margin: auto;\n`;\n\nconst TodoList = ({\n  todos = [],\n  onRemovePressed,\n  onCompletedPressed,\n  isLoading,\n  startLoadingTodos\n}) => {\n  useEffect(() => {\n    startLoadingTodos();\n  }, []);\n  const loadingMessage = <div>Loading todos...</div>;\n  const content = (\n    <ListWrapper>\n      <NewTodoForm />\n      {todos.map(todo => (\n        <TodoListItem\n          todo={todo}\n          onRemovePressed={onRemovePressed}\n          onCompletedPressed={onCompletedPressed}\n        />\n      ))}\n    </ListWrapper>\n  );\n  return isLoading ? loadingMessage : content;\n};\n\nconst mapStateToProps = state => ({\n    isLoading: state.isLoading,\n    todos: state.todos,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    startLoadingTodos: () => dispatch(loadTodos()),\n    onRemovePressed: id => dispatch(removeTodoRequest(id)),\n    onCompletedPressed: id => dispatch(markTodoAsCompletedRequest(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React from \"react\";\nimport ToDoList from \"./Components/TodoList\";\n\nconst App = () => {\n  return (\n    <>\n      <ToDoList />\n    </>\n  );\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}